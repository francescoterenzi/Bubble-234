# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "selectors"))

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

# Single-line step scoper
When /^(.*) within (.*[^:])$/ do |step, parent|
  with_scope(parent) { When step }
end

# Multi-line step scoper
When /^(.*) within (.*[^:]):$/ do |step, parent, table_or_string|
  with_scope(parent) { When "#{step}:", table_or_string }
end

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
#   When I fill in the following:
#     | Account Number | 5002       |
#     | Expiry date    | 2009-11-01 |
#     | Note           | Nice guy   |
#     | Wants Email?   |            |
#
# TODO: Add support for checkbox, select or option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  attach_file(field, File.expand_path(path))
end

Then /^(?:|I )should see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should
      field_value.should =~ /#{value}/
    else
      assert_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field(?: within (.*))? should not contain "([^"]*)"$/ do |field, parent, value|
  with_scope(parent) do
    field = find_field(field)
    field_value = (field.tag_name == 'textarea') ? field.text : field.value
    if field_value.respond_to? :should_not
      field_value.should_not =~ /#{value}/
    else
      assert_no_match(/#{value}/, field_value)
    end
  end
end

Then /^the "([^"]*)" field should have the error "([^"]*)"$/ do |field, error_message|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')

  form_for_input = element.find(:xpath, 'ancestor::form[1]')
  using_formtastic = form_for_input[:class].include?('formtastic')
  error_class = using_formtastic ? 'error' : 'field_with_errors'

  if classes.respond_to? :should
    classes.should include(error_class)
  else
    assert classes.include?(error_class)
  end

  if page.respond_to?(:should)
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      error_paragraph.should have_content(error_message)
    else
      page.should have_content("#{field.titlecase} #{error_message}")
    end
  else
    if using_formtastic
      error_paragraph = element.find(:xpath, '../*[@class="inline-errors"][1]')
      assert error_paragraph.has_content?(error_message)
    else
      assert page.has_content?("#{field.titlecase} #{error_message}")
    end
  end
end

Then /^the "([^"]*)" field should have no error$/ do |field|
  element = find_field(field)
  classes = element.find(:xpath, '..')[:class].split(' ')
  if classes.respond_to? :should
    classes.should_not include('field_with_errors')
    classes.should_not include('error')
  else
    assert !classes.include?('field_with_errors')
    assert !classes.include?('error')
  end
end

Then(/^I should check the "([^"]*)" checkbox$/) do |label|
	find_field(label).set(true)
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_true
    else
      assert field_checked
    end
  end
end

Then /^the "([^"]*)" checkbox(?: within (.*))? should not be checked$/ do |label, parent|
  with_scope(parent) do
    field_checked = find_field(label)['checked']
    if field_checked.respond_to? :should
      field_checked.should be_false
    else
      assert !field_checked
    end
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

#####

When /^I try to search an user that doesn't exist$/ do
  search('@')
end

When /^I search (.*)$/ do |username|
  search(username)
end

When /^I log in$/ do
  if @user == nil
    login('test@test.com','test')
  else
    @current_user = @user
    login(@user.email, 'testtest')
  end
end

When /^I log in as (.*)$/ do |email|
  @user = User.find_by(email: email)
  @current_user = @user
  login(@user.email, 'testtest')
end

When /^I register as (.+), (.+)$/ do |email, password|
  register(email, password)
end

Given /^I am signed in with (.*) provider$/ do |provider|
  visit "/users/auth/#{provider.downcase}"
end

When /^I sign in with (.*) provider$/ do |provider|
  visit "/users/auth/#{provider.downcase}"
end

Given /^I am a registered user$/ do
  @user = User.create!(:first_name => 'test', :last_name => 'user', :email => 'test@test.com', :username => 'test',:password => 'testtest', :password_confirmation => 'testtest')
end

Given /^another user exists$/ do
  User.create(:first_name => 'fake', :last_name => 'fake', :email => 'fake@user.com', :username => 'fake_test',:password => 'testtest', :password_confirmation => 'testtest')
end

Given /^he logs in$/ do
  login("fake_test", "testtest")
end

Given /^he logs out$/ do
  visit(destroy_user_session_path)
end

Given /^he creates a cocktail (.*)$/ do |title|
  new_cocktail(title)
end

Given /^I create a cocktail (.*)$/ do |title|
  new_cocktail(title)
end

Given /^another user called (.*) exists$/ do |user|
  @user = User.create!(:first_name => user, :last_name => user, :email => user, :username => user,:password => 'testtest', :password_confirmation => 'testtest')
end

When /^I press Delete button$/ do
  visit('/admin/users/0/delete')
end

When /^I press "Yes, I'm sure" button$/ do
  element = find_by_id('edit_user_0')
  Capybara::RackTest::Form.new(page.driver, element.native).submit
end

Given /^I am not a registered user$/ do
  @user = nil
end

Given /^I am a logged in user$/ do
  @user = User.create!(id: 100, :first_name => 'test', :last_name => 'test', :email => 'test@test.com', :username => 'test',:password => 'testtest')
  @current_user = @user
  login(@user.email, @user.password)
end

Given /^I am a logged in admin user$/ do
  @user = User.create!(id: 100, :first_name => 'test', :last_name => 'test',admin: true, :username => 'test',:email => 'test@test.com', :password => 'testtest')
  @current_user = @user
  login(@user.email, @user.password)
end

Given /^I was previously logged in as (.*)$/ do |user|
  @user = User.create!(id: 101, :first_name => user, :last_name => user, :email => user, :password => 'testtest')
  login(@user.email, @user.password)
  visit(destroy_user_session_path)
end

Given /^I am not authenticated$/ do
  visit destroy_user_session_path  # ensure that at least
end

Given /^another users's cocktail (.*) exists$/ do |cocktail|
  User.create(:first_name => 'fake', :last_name => 'fake', :email => 'fake@user.com', :username => 'fake_test',:password => 'testtest', :password_confirmation => 'testtest')
  login("fake_test", "testtest")
  new_cocktail(cocktail)
  visit(destroy_user_session_path)
end

Given /^I wrote a review for (.*) cocktail$/ do |cocktail|
  steps %Q{
    Given another users's cocktail #{cocktail} exists
    And I log in
    When I go to the cocktail #{cocktail} reviews page
    And I follow "Create a new Review"
    When I select "3" from "Rate"
    And I fill in "Comments" with "Il più buono di tutti"
    And I press "Create Review"
    Then I should see "Rate: 3"
  }
end

Then /^I should see the link to (.*) cocktail$/ do |c|
  ckt = Cocktail.find_by(:name => c)
  page.should have_link("see the #{c} recipe", :href => cocktail_path(:id => ckt.id))
end

Then /^I should see the link to (.*) review$/ do |c|
  ckt = Cocktail.find_by(:name => c)
  r = Review.find_by(:cocktail_id => ckt.id)
  page.should have_link("review", :href => cocktail_review_path(:id => r.id, :cocktail_id => r.cocktail_id))
end



module LoginSteps
  def login(email, password)
    visit(new_user_session_path)
    fill_in('Login', :with => email)
    fill_in('Password', :with => password)
    click_button('Log In')
  end
  def register(email, password)
    visit(new_user_registration_path)
    fill_in('First name', :with => email)
    fill_in('Last name', :with => email)
    fill_in('Email', :with => email)
    fill_in('Username', :with => password)
    fill_in('Password', :with => password)
    fill_in('Password confirmation', :with => password)
    click_button('Sign Up')
  end
end

module CocktailSteps
  def new_cocktail(name)
      visit(new_cocktail_path)
      fill_in("Name", :with => name)
      fill_in("Description", :with => "My cocktail")
      click_button('Create Cocktail')
  end
end

module UserSteps
  def search(name)
      fill_in("Search Users", :with => name)
      click_button('Search')
  end
end

World(LoginSteps)
World(CocktailSteps)
World(UserSteps)
